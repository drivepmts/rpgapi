{
  "openapi": "3.0.0",
  "info": {
    "title": "ReadyPayGo API",
    "description": "This is ReadyPayGo API server for processing credit cards and eChecks",
    "termsOfService": "https://my.readypaygo.com/terms",
    "contact": {
      "name": "API Support",
      "url": "https://my.readypaygo.com/help",
      "email": "office@readypaygo.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api2.readypaygo.com"
    }
  ],
  "paths": {
    "/card": {
      "post": {
        "tags": [
          "Credit Cards"
        ],
        "description": "Creates a new card token.  Duplicates are allowed.",
        "operationId": "createCard",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful token creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          "required": true
        }
      }
    },
    "/card/{token_id}": {
      "put": {
        "tags": [
          "Credit Cards"
        ],
        "description": "Update a credit card token",
        "operationId": "updateCard",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "Token ID to be removed - note: token will not be removed if there are any payment schedules associated with it.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resource was updated successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "Updates an existing card token.",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "tags": [
          "Credit Cards"
        ],
        "description": "Delete a credit card token",
        "operationId": "deleteCard",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "Token ID to be removed - note: token will not be removed if there are any payment schedules associated with it.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/check": {
      "post": {
        "tags": [
          "Checks"
        ],
        "description": "Creates a new eCheck token.  Duplicates are allowed.",
        "operationId": "createCheck",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "token response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Check"
              }
            }
          },
          "required": true
        }
      }
    },
    "/charge/card": {
      "post": {
        "tags": [
          "Charges",
          "Credit Cards"
        ],
        "description": "One time charge of credit card",
        "operationId": "chargeCard",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfulTransaction"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Card"
                  },
                  {
                    "$ref": "#/components/schemas/Charge"
                  }
                ]
              }
            }
          },
          "required": true
        }
      }
    },
    "/charge/check": {
      "post": {
        "tags": [
          "Charges",
          "Checks"
        ],
        "description": "One time charge of eCheck",
        "operationId": "chargeCheck",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfulTransaction"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Check"
                  },
                  {
                    "$ref": "#/components/schemas/Charge"
                  }
                ]
              }
            }
          },
          "required": true
        }
      }
    },
    "/charge/check/{token_id}": {
      "post": {
        "tags": [
          "Charges",
          "Checks"
        ],
        "description": "One time charge of tokenized check",
        "operationId": "chargeCheckToken",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfulTransaction"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Token"
                  },
                  {
                    "$ref": "#/components/schemas/Charge"
                  }
                ]
              }
            }
          },
          "required": true
        }
      }
    },
    "/charge/card/{token_id}": {
      "post": {
        "tags": [
          "Charges",
          "Credit Cards"
        ],
        "description": "One time charge of tokenized card",
        "operationId": "chargeCardToken",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfulTransaction"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Token"
                  },
                  {
                    "$ref": "#/components/schemas/Charge"
                  }
                ]
              }
            }
          },
          "required": true
        }
      }
    },
    "/check/{token_id}": {
      "put": {
        "tags": [
          "Checks"
        ],
        "description": "Update an eCheck token",
        "operationId": "updateCheck2",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "Token ID to be removed - note: token will not be removed if there are any payment schedules associated with it.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resource was updated successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Check"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "tags": [
          "Checks"
        ],
        "description": "Delete an eCheck token",
        "operationId": "deleteCheck",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "GUID for log tracking",
            "schema": {
              "$ref": "#/components/headers/X-REQUEST-ID"
            }
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "Token ID to be removed - note: token will not be removed if there are any payment schedules associated with it.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Charge": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "amount being charged, in pennies",
            "type": "integer"
          }
        }
      },
      "ChargeResult": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "description": "Transaction ID returned by payment gateway",
            "maxLength": 32,
            "type": "string"
          },
          "auth_code": {
            "description": "Authrization Code returned by payment gateway, if available",
            "maxLength": 16,
            "type": "string"
          },
          "message": {
            "description": "Transaction success message retuned by payment gateway, if available",
            "maxLength": 128,
            "type": "string"
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "token_id": {
            "description": "Token ID for use in tokenized payments",
            "maxLength": 16,
            "minLength": 12,
            "type": "string"
          }
        }
      },
      "Check": {
        "required": [
          "routingNumber",
          "accountNumber",
          "name"
        ],
        "type": "object",
        "properties": {
          "routing_number": {
            "description": "Check routing number",
            "maxLength": 9,
            "minLength": 9,
            "type": "string",
            "example": 122105155
          },
          "account_number": {
            "description": "Check account number",
            "maxLength": 12,
            "minLength": 5,
            "type": "string",
            "example": 999999999999
          },
          "name": {
            "description": "Account Holder's Name",
            "maxLength": 128,
            "type": "string"
          }
        }
      },
      "Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "number": {
            "description": "Full credit card number",
            "maxLength": 18,
            "type": "string",
            "example": 4111111111111111
          },
          "expMonth": {
            "description": "Expiration month of credit card 2 digits only with leading 0 if <10",
            "maxLength": 2,
            "minLength": 2,
            "type": "integer",
            "example": 5
          },
          "expYear": {
            "description": "Expiration year of credit card last 2 digits only",
            "maxLength": 2,
            "minLength": 2,
            "type": "integer",
            "example": 23
          },
          "first": {
            "description": "Cardholder first name",
            "maxLength": 128,
            "type": "string"
          },
          "last": {
            "description": "Cardholder last name",
            "maxLength": 128,
            "type": "string"
          },
          "address": {
            "description": "Cardholder address",
            "maxLength": 128,
            "type": "string"
          },
          "city": {
            "description": "Cardholder city",
            "maxLength": 128,
            "type": "string"
          },
          "state_province": {
            "description": "Cardholder state or province",
            "maxLength": 64,
            "type": "string"
          },
          "post_code": {
            "description": "Cardholder postal code",
            "maxLength": 18,
            "minLength": 6,
            "type": "string"
          },
          "country_code": {
            "description": "Cardholder country code",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "SuccessfulTransaction": {
        "description": "Transaction was successfully run",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChargeResult"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "headers": {
      "X-REQUEST-ID": {
        "description": "used to track API activity in logs",
        "schema": {
          "type": "object",
          "properties": {
            "guid": {
              "format": "uuid",
              "description": "Globally unique conversation identifier",
              "type": "string",
              "example": "0c07dfdc-89bd-4881-a361-673f6f08efca"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      },
      "appId": {
        "type": "apiKey",
        "name": "X-APP-ID",
        "in": "header"
      }
    }
  }
}